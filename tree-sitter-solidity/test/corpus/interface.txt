==================
Interface Example
==================

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

---

(source_file
  (comment)
  (pragma_directive
    (solidity_version
      (version_constraint)))
  (interface_definition
    (identifier)
    (event_definition
      (identifier)
      (event_parameter_list
        (event_parameter
          (type_name
            (elementary_type_name))
          (identifier))
        (event_parameter
          (type_name
            (elementary_type_name))
          (identifier))
        (event_parameter
          (type_name
            (elementary_type_name))
          (identifier))))
    (event_definition
      (identifier)
      (event_parameter_list
        (event_parameter
          (type_name
            (elementary_type_name))
          (identifier))
        (event_parameter
          (type_name
            (elementary_type_name))
          (identifier))
        (event_parameter
          (type_name
            (elementary_type_name))
          (identifier))))
    (function_definition
      (identifier)
      (parameter_list)
      (return_parameters
        (parameter_list
          (parameter
            (type_name
              (elementary_type_name))))))
    (function_definition
      (identifier)
      (parameter_list
        (parameter
          (type_name
            (elementary_type_name))
          (identifier)))
      (return_parameters
        (parameter_list
          (parameter
            (type_name
              (elementary_type_name))))))
    (function_definition
      (identifier)
      (parameter_list
        (parameter
          (type_name
            (elementary_type_name))
          (identifier))
        (parameter
          (type_name
            (elementary_type_name))
          (identifier)))
      (return_parameters
        (parameter_list
          (parameter
            (type_name
              (elementary_type_name))))))
    (function_definition
      (identifier)
      (parameter_list
        (parameter
          (type_name
            (elementary_type_name))
          (identifier))
        (parameter
          (type_name
            (elementary_type_name))
          (identifier)))
      (return_parameters
        (parameter_list
          (parameter
            (type_name
              (elementary_type_name))))))
    (function_definition
      (identifier)
      (parameter_list
        (parameter
          (type_name
            (elementary_type_name))
          (identifier))
        (parameter
          (type_name
            (elementary_type_name))
          (identifier)))
      (return_parameters
        (parameter_list
          (parameter
            (type_name
              (elementary_type_name))))))
    (function_definition
      (identifier)
      (parameter_list
        (parameter
          (type_name
            (elementary_type_name))
          (identifier))
        (parameter
          (type_name
            (elementary_type_name))
          (identifier))
        (parameter
          (type_name
            (elementary_type_name))
          (identifier)))
      (return_parameters
        (parameter_list
          (parameter
            (type_name
              (elementary_type_name))))))))
